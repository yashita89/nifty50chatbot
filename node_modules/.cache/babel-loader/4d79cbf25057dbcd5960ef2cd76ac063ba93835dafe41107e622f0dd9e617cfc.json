{"ast":null,"code":"var _jsxFileName = \"/Users/yashitakilledar/Stocks/nifty50-ai-chatbot/src/components/StockDataTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockDataTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data/nifty50-sample.csv');\n        const text = await response.text();\n        const parsedData = parseCSV(text);\n        setData(parsedData);\n      } catch (err) {\n        setError('Failed to fetch stock data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const parseCSV = text => {\n    const rows = text.split('\\n').slice(1);\n    return rows.filter(row => row.trim() !== '').map(row => {\n      const columns = row.split(',');\n      return {\n        symbol: columns[0],\n        companyName: columns[1] || '',\n        lastPrice: parseFloat(columns[2]),\n        change: parseFloat(columns[3]),\n        percentChange: parseFloat(columns[4]),\n        volume: parseInt(columns[5]),\n        marketCap: parseFloat(columns[6]) || 0\n      };\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Symbol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Company Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Last Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Percent Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Volume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Market Cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((stock, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.companyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.lastPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.percentChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.volume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.marketCap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(StockDataTable, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = StockDataTable;\nexport default StockDataTable;\nvar _c;\n$RefreshReg$(_c, \"StockDataTable\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","StockDataTable","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","text","parsedData","parseCSV","err","rows","split","slice","filter","row","trim","map","columns","symbol","companyName","lastPrice","parseFloat","change","percentChange","volume","parseInt","marketCap","children","fileName","_jsxFileName","lineNumber","columnNumber","stock","idx","_c","$RefreshReg$"],"sources":["/Users/yashitakilledar/Stocks/nifty50-ai-chatbot/src/components/StockDataTable.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StockData } from '../types';\n\nconst StockDataTable: React.FC = () => {\n  const [data, setData] = useState<StockData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/data/nifty50-sample.csv');\n        const text = await response.text();\n        const parsedData = parseCSV(text);\n        setData(parsedData);\n      } catch (err) {\n        setError('Failed to fetch stock data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const parseCSV = (text: string): StockData[] => {\n    const rows = text.split('\\n').slice(1);\n    return rows\n      .filter(row => row.trim() !== '')\n      .map(row => {\n        const columns = row.split(',');\n        return {\n          symbol: columns[0],\n          companyName: columns[1] || '',\n          lastPrice: parseFloat(columns[2]),\n          change: parseFloat(columns[3]),\n          percentChange: parseFloat(columns[4]),\n          volume: parseInt(columns[5]),\n          marketCap: parseFloat(columns[6]) || 0,\n        };\n      });\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Symbol</th>\n          <th>Company Name</th>\n          <th>Last Price</th>\n          <th>Change</th>\n          <th>Percent Change</th>\n          <th>Volume</th>\n          <th>Market Cap</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((stock, idx) => (\n          <tr key={idx}>\n            <td>{stock.symbol}</td>\n            <td>{stock.companyName}</td>\n            <td>{stock.lastPrice}</td>\n            <td>{stock.change}</td>\n            <td>{stock.percentChange}</td>\n            <td>{stock.volume}</td>\n            <td>{stock.marketCap}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default StockDataTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}